#!groovy
//  groovy Jenkinsfile
properties([disableConcurrentBuilds()])

image_name = 'pliuta/billing'

pipeline  {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Create docker image") {
            steps {
                echo 'Creating docker image ...'
                dir('.'){
                    sh "docker stop `docker ps -a --no-trunc | grep $image_name | awk {'print \$1'}` || true"
                    sh "docker rm `docker ps -a --no-trunc | grep $image_name | awk {'print \$1'}` || true"
                    sh "docker rmi $image_name || true"
                    sh "docker build -t $image_name ."
                    sh "docker run -d --restart=always -p 8000:8000 $image_name"

                    // sh "docker stop"
                    // sh "docker run -d --restart=always pliuta/billing ."
                    // echo "First step works ... 123"
                }
            }
        }
        stage("docker login") {
            steps {
                echo " ============== docker login =================="
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                    docker login -u $USERNAME -p $PASSWORD
                    '''
                }
            }
        }
        // stage("docker push") {
        //     steps {
        //         echo " ============== pushing image =================="
        //         sh '''
        //         docker push macnaer/chatterboxserver:latest
        //         '''
        //     }
        // }
        // stage("docker stop") {
        //     steps {
        //         echo " ============== stoping all images =================="
        //         sh '''
        //         docker stop chatterboxserver
        //         '''
        //     }
        // } 
        // stage("docker remove") {
        //     steps {
        //         echo " ============== removing all docker containers =================="
        //         sh '''
        //         docker rm chatterboxserver
        //         '''
        //     }
        // }
        //stage("docker run") {
        //    steps {
        //        echo " ============== starting chatterbox server =================="
        //        sh '''
        //        docker run -d --restart=always --name chatterboxserver -p 3200:3200 macnaer/chatterboxserver
        //        '''
        //    }
        //}
        // stage("Deploy to stage server") {
        //     steps {
        //         echo " ============== Running playbook =================="
        //         sh '''
        //         ansible-playbook toolbox/ansible/playbooks/demloyToStageServer.yml
        //         '''
        //     }
        //}

    }
}